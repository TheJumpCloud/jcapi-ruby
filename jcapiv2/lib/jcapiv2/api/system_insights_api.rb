=begin
#JumpCloud APIs

# JumpCloud's V2 API. This set of endpoints allows JumpCloud customers to manage objects, groupings and mappings and interact with the JumpCloud Graph.

OpenAPI spec version: 2.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module JCAPIv2
  class SystemInsightsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # List System Insights Apps
    # Valid filter fields are `jc_system_id` and `bundle_name`.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit  (default to 10)
    # @option opts [Integer] :skip The offset into the records to return. (default to 0)
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @return [Array<SystemInsightsApps>]
    def systeminsights_list_apps(opts = {})
      data, _status_code, _headers = systeminsights_list_apps_with_http_info(opts)
      return data
    end

    # List System Insights Apps
    # Valid filter fields are &#x60;jc_system_id&#x60; and &#x60;bundle_name&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit 
    # @option opts [Integer] :skip The offset into the records to return.
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @return [Array<(Array<SystemInsightsApps>, Fixnum, Hash)>] Array<SystemInsightsApps> data, response status code and response headers
    def systeminsights_list_apps_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SystemInsightsApi.systeminsights_list_apps ..."
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.systeminsights_list_apps, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.systeminsights_list_apps, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'skip'].nil? && opts[:'skip'] < 0
        fail ArgumentError, 'invalid value for "opts[:"skip"]" when calling SystemInsightsApi.systeminsights_list_apps, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/systeminsights/apps"

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'filter'] = @api_client.build_collection_param(opts[:'filter'], :csv) if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SystemInsightsApps>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemInsightsApi#systeminsights_list_apps\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List System Insights System Apps
    # Valid filter fields are `bundle_name`.
    # @param jc_system_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit  (default to 10)
    # @option opts [Integer] :skip The offset into the records to return. (default to 0)
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @return [Array<SystemInsightsApps>]
    def systeminsights_list_apps_0(jc_system_id, opts = {})
      data, _status_code, _headers = systeminsights_list_apps_0_with_http_info(jc_system_id, opts)
      return data
    end

    # List System Insights System Apps
    # Valid filter fields are &#x60;bundle_name&#x60;.
    # @param jc_system_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit 
    # @option opts [Integer] :skip The offset into the records to return.
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @return [Array<(Array<SystemInsightsApps>, Fixnum, Hash)>] Array<SystemInsightsApps> data, response status code and response headers
    def systeminsights_list_apps_0_with_http_info(jc_system_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SystemInsightsApi.systeminsights_list_apps_0 ..."
      end
      # verify the required parameter 'jc_system_id' is set
      if @api_client.config.client_side_validation && jc_system_id.nil?
        fail ArgumentError, "Missing the required parameter 'jc_system_id' when calling SystemInsightsApi.systeminsights_list_apps_0"
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.systeminsights_list_apps_0, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.systeminsights_list_apps_0, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'skip'].nil? && opts[:'skip'] < 0
        fail ArgumentError, 'invalid value for "opts[:"skip"]" when calling SystemInsightsApi.systeminsights_list_apps_0, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/systeminsights/{jc_system_id}/apps".sub('{' + 'jc_system_id' + '}', jc_system_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'filter'] = @api_client.build_collection_param(opts[:'filter'], :csv) if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SystemInsightsApps>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemInsightsApi#systeminsights_list_apps_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List System Insights System Browser Plugins
    # Valid filter fields are `name`.
    # @param jc_system_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit  (default to 10)
    # @option opts [Integer] :skip The offset into the records to return. (default to 0)
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @return [Array<SystemInsightsBrowserPlugins>]
    def systeminsights_list_browser_plugins(jc_system_id, opts = {})
      data, _status_code, _headers = systeminsights_list_browser_plugins_with_http_info(jc_system_id, opts)
      return data
    end

    # List System Insights System Browser Plugins
    # Valid filter fields are &#x60;name&#x60;.
    # @param jc_system_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit 
    # @option opts [Integer] :skip The offset into the records to return.
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @return [Array<(Array<SystemInsightsBrowserPlugins>, Fixnum, Hash)>] Array<SystemInsightsBrowserPlugins> data, response status code and response headers
    def systeminsights_list_browser_plugins_with_http_info(jc_system_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SystemInsightsApi.systeminsights_list_browser_plugins ..."
      end
      # verify the required parameter 'jc_system_id' is set
      if @api_client.config.client_side_validation && jc_system_id.nil?
        fail ArgumentError, "Missing the required parameter 'jc_system_id' when calling SystemInsightsApi.systeminsights_list_browser_plugins"
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.systeminsights_list_browser_plugins, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.systeminsights_list_browser_plugins, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'skip'].nil? && opts[:'skip'] < 0
        fail ArgumentError, 'invalid value for "opts[:"skip"]" when calling SystemInsightsApi.systeminsights_list_browser_plugins, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/systeminsights/{jc_system_id}/browser_plugins".sub('{' + 'jc_system_id' + '}', jc_system_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'filter'] = @api_client.build_collection_param(opts[:'filter'], :csv) if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SystemInsightsBrowserPlugins>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemInsightsApi#systeminsights_list_browser_plugins\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List System Insights Browser Plugins
    # Valid filter fields are `jc_system_id` and `name`.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit  (default to 10)
    # @option opts [Integer] :skip The offset into the records to return. (default to 0)
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @return [Array<SystemInsightsBrowserPlugins>]
    def systeminsights_list_browser_plugins_0(opts = {})
      data, _status_code, _headers = systeminsights_list_browser_plugins_0_with_http_info(opts)
      return data
    end

    # List System Insights Browser Plugins
    # Valid filter fields are &#x60;jc_system_id&#x60; and &#x60;name&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit 
    # @option opts [Integer] :skip The offset into the records to return.
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @return [Array<(Array<SystemInsightsBrowserPlugins>, Fixnum, Hash)>] Array<SystemInsightsBrowserPlugins> data, response status code and response headers
    def systeminsights_list_browser_plugins_0_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SystemInsightsApi.systeminsights_list_browser_plugins_0 ..."
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.systeminsights_list_browser_plugins_0, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.systeminsights_list_browser_plugins_0, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'skip'].nil? && opts[:'skip'] < 0
        fail ArgumentError, 'invalid value for "opts[:"skip"]" when calling SystemInsightsApi.systeminsights_list_browser_plugins_0, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/systeminsights/browser_plugins"

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'filter'] = @api_client.build_collection_param(opts[:'filter'], :csv) if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SystemInsightsBrowserPlugins>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemInsightsApi#systeminsights_list_browser_plugins_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List System Insights System Chrome Extensions
    # Valid filter fields are `name`.
    # @param jc_system_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit  (default to 10)
    # @option opts [Integer] :skip The offset into the records to return. (default to 0)
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @return [Array<SystemInsightsChromeExtensions>]
    def systeminsights_list_chrome_extensions(jc_system_id, opts = {})
      data, _status_code, _headers = systeminsights_list_chrome_extensions_with_http_info(jc_system_id, opts)
      return data
    end

    # List System Insights System Chrome Extensions
    # Valid filter fields are &#x60;name&#x60;.
    # @param jc_system_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit 
    # @option opts [Integer] :skip The offset into the records to return.
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @return [Array<(Array<SystemInsightsChromeExtensions>, Fixnum, Hash)>] Array<SystemInsightsChromeExtensions> data, response status code and response headers
    def systeminsights_list_chrome_extensions_with_http_info(jc_system_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SystemInsightsApi.systeminsights_list_chrome_extensions ..."
      end
      # verify the required parameter 'jc_system_id' is set
      if @api_client.config.client_side_validation && jc_system_id.nil?
        fail ArgumentError, "Missing the required parameter 'jc_system_id' when calling SystemInsightsApi.systeminsights_list_chrome_extensions"
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.systeminsights_list_chrome_extensions, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.systeminsights_list_chrome_extensions, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'skip'].nil? && opts[:'skip'] < 0
        fail ArgumentError, 'invalid value for "opts[:"skip"]" when calling SystemInsightsApi.systeminsights_list_chrome_extensions, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/systeminsights/{jc_system_id}/chrome_extensions".sub('{' + 'jc_system_id' + '}', jc_system_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'filter'] = @api_client.build_collection_param(opts[:'filter'], :csv) if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SystemInsightsChromeExtensions>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemInsightsApi#systeminsights_list_chrome_extensions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List System Insights Chrome Extensions
    # Valid filter fields are `jc_system_id` and `name`.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit  (default to 10)
    # @option opts [Integer] :skip The offset into the records to return. (default to 0)
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @return [Array<SystemInsightsChromeExtensions>]
    def systeminsights_list_chrome_extensions_0(opts = {})
      data, _status_code, _headers = systeminsights_list_chrome_extensions_0_with_http_info(opts)
      return data
    end

    # List System Insights Chrome Extensions
    # Valid filter fields are &#x60;jc_system_id&#x60; and &#x60;name&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit 
    # @option opts [Integer] :skip The offset into the records to return.
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @return [Array<(Array<SystemInsightsChromeExtensions>, Fixnum, Hash)>] Array<SystemInsightsChromeExtensions> data, response status code and response headers
    def systeminsights_list_chrome_extensions_0_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SystemInsightsApi.systeminsights_list_chrome_extensions_0 ..."
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.systeminsights_list_chrome_extensions_0, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.systeminsights_list_chrome_extensions_0, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'skip'].nil? && opts[:'skip'] < 0
        fail ArgumentError, 'invalid value for "opts[:"skip"]" when calling SystemInsightsApi.systeminsights_list_chrome_extensions_0, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/systeminsights/chrome_extensions"

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'filter'] = @api_client.build_collection_param(opts[:'filter'], :csv) if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SystemInsightsChromeExtensions>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemInsightsApi#systeminsights_list_chrome_extensions_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List System Insights Disk Encryption
    # Valid filter fields are `jc_system_id` and `encryption_status`.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit  (default to 10)
    # @option opts [Integer] :skip The offset into the records to return. (default to 0)
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @return [Array<SystemInsightsDiskEncryption>]
    def systeminsights_list_disk_encryption(opts = {})
      data, _status_code, _headers = systeminsights_list_disk_encryption_with_http_info(opts)
      return data
    end

    # List System Insights Disk Encryption
    # Valid filter fields are &#x60;jc_system_id&#x60; and &#x60;encryption_status&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit 
    # @option opts [Integer] :skip The offset into the records to return.
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @return [Array<(Array<SystemInsightsDiskEncryption>, Fixnum, Hash)>] Array<SystemInsightsDiskEncryption> data, response status code and response headers
    def systeminsights_list_disk_encryption_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SystemInsightsApi.systeminsights_list_disk_encryption ..."
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.systeminsights_list_disk_encryption, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.systeminsights_list_disk_encryption, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'skip'].nil? && opts[:'skip'] < 0
        fail ArgumentError, 'invalid value for "opts[:"skip"]" when calling SystemInsightsApi.systeminsights_list_disk_encryption, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/systeminsights/disk_encryption"

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'filter'] = @api_client.build_collection_param(opts[:'filter'], :csv) if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SystemInsightsDiskEncryption>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemInsightsApi#systeminsights_list_disk_encryption\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List System Insights System Disk Encryption
    # Valid filter fields are `encryption_status`.
    # @param jc_system_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit  (default to 10)
    # @option opts [Integer] :skip The offset into the records to return. (default to 0)
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @return [Array<SystemInsightsDiskEncryption>]
    def systeminsights_list_disk_encryption_0(jc_system_id, opts = {})
      data, _status_code, _headers = systeminsights_list_disk_encryption_0_with_http_info(jc_system_id, opts)
      return data
    end

    # List System Insights System Disk Encryption
    # Valid filter fields are &#x60;encryption_status&#x60;.
    # @param jc_system_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit 
    # @option opts [Integer] :skip The offset into the records to return.
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @return [Array<(Array<SystemInsightsDiskEncryption>, Fixnum, Hash)>] Array<SystemInsightsDiskEncryption> data, response status code and response headers
    def systeminsights_list_disk_encryption_0_with_http_info(jc_system_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SystemInsightsApi.systeminsights_list_disk_encryption_0 ..."
      end
      # verify the required parameter 'jc_system_id' is set
      if @api_client.config.client_side_validation && jc_system_id.nil?
        fail ArgumentError, "Missing the required parameter 'jc_system_id' when calling SystemInsightsApi.systeminsights_list_disk_encryption_0"
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.systeminsights_list_disk_encryption_0, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.systeminsights_list_disk_encryption_0, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'skip'].nil? && opts[:'skip'] < 0
        fail ArgumentError, 'invalid value for "opts[:"skip"]" when calling SystemInsightsApi.systeminsights_list_disk_encryption_0, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/systeminsights/{jc_system_id}/disk_encryption".sub('{' + 'jc_system_id' + '}', jc_system_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'filter'] = @api_client.build_collection_param(opts[:'filter'], :csv) if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SystemInsightsDiskEncryption>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemInsightsApi#systeminsights_list_disk_encryption_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List System Insights Firefox Addons
    # Valid filter fields are `jc_system_id` and `name`.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit  (default to 10)
    # @option opts [Integer] :skip The offset into the records to return. (default to 0)
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @return [Array<SystemInsightsFirefoxAddons>]
    def systeminsights_list_firefox_addons(opts = {})
      data, _status_code, _headers = systeminsights_list_firefox_addons_with_http_info(opts)
      return data
    end

    # List System Insights Firefox Addons
    # Valid filter fields are &#x60;jc_system_id&#x60; and &#x60;name&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit 
    # @option opts [Integer] :skip The offset into the records to return.
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @return [Array<(Array<SystemInsightsFirefoxAddons>, Fixnum, Hash)>] Array<SystemInsightsFirefoxAddons> data, response status code and response headers
    def systeminsights_list_firefox_addons_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SystemInsightsApi.systeminsights_list_firefox_addons ..."
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.systeminsights_list_firefox_addons, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.systeminsights_list_firefox_addons, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'skip'].nil? && opts[:'skip'] < 0
        fail ArgumentError, 'invalid value for "opts[:"skip"]" when calling SystemInsightsApi.systeminsights_list_firefox_addons, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/systeminsights/firefox_addons"

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'filter'] = @api_client.build_collection_param(opts[:'filter'], :csv) if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SystemInsightsFirefoxAddons>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemInsightsApi#systeminsights_list_firefox_addons\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List System Insights System Firefox Addons
    # Valid filter fields are `name`.
    # @param jc_system_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit  (default to 10)
    # @option opts [Integer] :skip The offset into the records to return. (default to 0)
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @return [Array<SystemInsightsFirefoxAddons>]
    def systeminsights_list_firefox_addons_0(jc_system_id, opts = {})
      data, _status_code, _headers = systeminsights_list_firefox_addons_0_with_http_info(jc_system_id, opts)
      return data
    end

    # List System Insights System Firefox Addons
    # Valid filter fields are &#x60;name&#x60;.
    # @param jc_system_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit 
    # @option opts [Integer] :skip The offset into the records to return.
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @return [Array<(Array<SystemInsightsFirefoxAddons>, Fixnum, Hash)>] Array<SystemInsightsFirefoxAddons> data, response status code and response headers
    def systeminsights_list_firefox_addons_0_with_http_info(jc_system_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SystemInsightsApi.systeminsights_list_firefox_addons_0 ..."
      end
      # verify the required parameter 'jc_system_id' is set
      if @api_client.config.client_side_validation && jc_system_id.nil?
        fail ArgumentError, "Missing the required parameter 'jc_system_id' when calling SystemInsightsApi.systeminsights_list_firefox_addons_0"
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.systeminsights_list_firefox_addons_0, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.systeminsights_list_firefox_addons_0, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'skip'].nil? && opts[:'skip'] < 0
        fail ArgumentError, 'invalid value for "opts[:"skip"]" when calling SystemInsightsApi.systeminsights_list_firefox_addons_0, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/systeminsights/{jc_system_id}/firefox_addons".sub('{' + 'jc_system_id' + '}', jc_system_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'filter'] = @api_client.build_collection_param(opts[:'filter'], :csv) if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SystemInsightsFirefoxAddons>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemInsightsApi#systeminsights_list_firefox_addons_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List System Insights Groups
    # Valid filter fields are `jc_system_id` and `groupname`.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit  (default to 10)
    # @option opts [Integer] :skip The offset into the records to return. (default to 0)
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @return [Array<SystemInsightsGroups>]
    def systeminsights_list_groups(opts = {})
      data, _status_code, _headers = systeminsights_list_groups_with_http_info(opts)
      return data
    end

    # List System Insights Groups
    # Valid filter fields are &#x60;jc_system_id&#x60; and &#x60;groupname&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit 
    # @option opts [Integer] :skip The offset into the records to return.
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @return [Array<(Array<SystemInsightsGroups>, Fixnum, Hash)>] Array<SystemInsightsGroups> data, response status code and response headers
    def systeminsights_list_groups_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SystemInsightsApi.systeminsights_list_groups ..."
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.systeminsights_list_groups, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.systeminsights_list_groups, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'skip'].nil? && opts[:'skip'] < 0
        fail ArgumentError, 'invalid value for "opts[:"skip"]" when calling SystemInsightsApi.systeminsights_list_groups, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/systeminsights/groups"

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'filter'] = @api_client.build_collection_param(opts[:'filter'], :csv) if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SystemInsightsGroups>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemInsightsApi#systeminsights_list_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List System Insights System Groups
    # Valid filter fields are `groupname`.
    # @param jc_system_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit  (default to 10)
    # @option opts [Integer] :skip The offset into the records to return. (default to 0)
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @return [Array<SystemInsightsGroups>]
    def systeminsights_list_groups_0(jc_system_id, opts = {})
      data, _status_code, _headers = systeminsights_list_groups_0_with_http_info(jc_system_id, opts)
      return data
    end

    # List System Insights System Groups
    # Valid filter fields are &#x60;groupname&#x60;.
    # @param jc_system_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit 
    # @option opts [Integer] :skip The offset into the records to return.
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @return [Array<(Array<SystemInsightsGroups>, Fixnum, Hash)>] Array<SystemInsightsGroups> data, response status code and response headers
    def systeminsights_list_groups_0_with_http_info(jc_system_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SystemInsightsApi.systeminsights_list_groups_0 ..."
      end
      # verify the required parameter 'jc_system_id' is set
      if @api_client.config.client_side_validation && jc_system_id.nil?
        fail ArgumentError, "Missing the required parameter 'jc_system_id' when calling SystemInsightsApi.systeminsights_list_groups_0"
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.systeminsights_list_groups_0, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.systeminsights_list_groups_0, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'skip'].nil? && opts[:'skip'] < 0
        fail ArgumentError, 'invalid value for "opts[:"skip"]" when calling SystemInsightsApi.systeminsights_list_groups_0, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/systeminsights/{jc_system_id}/groups".sub('{' + 'jc_system_id' + '}', jc_system_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'filter'] = @api_client.build_collection_param(opts[:'filter'], :csv) if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SystemInsightsGroups>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemInsightsApi#systeminsights_list_groups_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List System Insights Interface Addresses
    # Valid filter fields are `jc_system_id` and `address`.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit  (default to 10)
    # @option opts [Integer] :skip The offset into the records to return. (default to 0)
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @return [Array<SystemInsightsInterfaceAddresses>]
    def systeminsights_list_interface_addresses(opts = {})
      data, _status_code, _headers = systeminsights_list_interface_addresses_with_http_info(opts)
      return data
    end

    # List System Insights Interface Addresses
    # Valid filter fields are &#x60;jc_system_id&#x60; and &#x60;address&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit 
    # @option opts [Integer] :skip The offset into the records to return.
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @return [Array<(Array<SystemInsightsInterfaceAddresses>, Fixnum, Hash)>] Array<SystemInsightsInterfaceAddresses> data, response status code and response headers
    def systeminsights_list_interface_addresses_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SystemInsightsApi.systeminsights_list_interface_addresses ..."
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.systeminsights_list_interface_addresses, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.systeminsights_list_interface_addresses, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'skip'].nil? && opts[:'skip'] < 0
        fail ArgumentError, 'invalid value for "opts[:"skip"]" when calling SystemInsightsApi.systeminsights_list_interface_addresses, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/systeminsights/interface_addresses"

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'filter'] = @api_client.build_collection_param(opts[:'filter'], :csv) if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SystemInsightsInterfaceAddresses>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemInsightsApi#systeminsights_list_interface_addresses\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List System Insights System Interface Addresses
    # Valid filter fields are `address`.
    # @param jc_system_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit  (default to 10)
    # @option opts [Integer] :skip The offset into the records to return. (default to 0)
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @return [Array<SystemInsightsInterfaceAddresses>]
    def systeminsights_list_interface_addresses_0(jc_system_id, opts = {})
      data, _status_code, _headers = systeminsights_list_interface_addresses_0_with_http_info(jc_system_id, opts)
      return data
    end

    # List System Insights System Interface Addresses
    # Valid filter fields are &#x60;address&#x60;.
    # @param jc_system_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit 
    # @option opts [Integer] :skip The offset into the records to return.
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @return [Array<(Array<SystemInsightsInterfaceAddresses>, Fixnum, Hash)>] Array<SystemInsightsInterfaceAddresses> data, response status code and response headers
    def systeminsights_list_interface_addresses_0_with_http_info(jc_system_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SystemInsightsApi.systeminsights_list_interface_addresses_0 ..."
      end
      # verify the required parameter 'jc_system_id' is set
      if @api_client.config.client_side_validation && jc_system_id.nil?
        fail ArgumentError, "Missing the required parameter 'jc_system_id' when calling SystemInsightsApi.systeminsights_list_interface_addresses_0"
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.systeminsights_list_interface_addresses_0, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.systeminsights_list_interface_addresses_0, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'skip'].nil? && opts[:'skip'] < 0
        fail ArgumentError, 'invalid value for "opts[:"skip"]" when calling SystemInsightsApi.systeminsights_list_interface_addresses_0, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/systeminsights/{jc_system_id}/interface_addresses".sub('{' + 'jc_system_id' + '}', jc_system_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'filter'] = @api_client.build_collection_param(opts[:'filter'], :csv) if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SystemInsightsInterfaceAddresses>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemInsightsApi#systeminsights_list_interface_addresses_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List System Insights Mounts
    # Valid filter fields are `jc_system_id` and `path`.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit  (default to 10)
    # @option opts [Integer] :skip The offset into the records to return. (default to 0)
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @return [Array<SystemInsightsMounts>]
    def systeminsights_list_mounts(opts = {})
      data, _status_code, _headers = systeminsights_list_mounts_with_http_info(opts)
      return data
    end

    # List System Insights Mounts
    # Valid filter fields are &#x60;jc_system_id&#x60; and &#x60;path&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit 
    # @option opts [Integer] :skip The offset into the records to return.
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @return [Array<(Array<SystemInsightsMounts>, Fixnum, Hash)>] Array<SystemInsightsMounts> data, response status code and response headers
    def systeminsights_list_mounts_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SystemInsightsApi.systeminsights_list_mounts ..."
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.systeminsights_list_mounts, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.systeminsights_list_mounts, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'skip'].nil? && opts[:'skip'] < 0
        fail ArgumentError, 'invalid value for "opts[:"skip"]" when calling SystemInsightsApi.systeminsights_list_mounts, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/systeminsights/mounts"

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'filter'] = @api_client.build_collection_param(opts[:'filter'], :csv) if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SystemInsightsMounts>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemInsightsApi#systeminsights_list_mounts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List System Insights System Mounts
    # Valid filter fields are `path`.
    # @param jc_system_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit  (default to 10)
    # @option opts [Integer] :skip The offset into the records to return. (default to 0)
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @return [Array<SystemInsightsMounts>]
    def systeminsights_list_mounts_0(jc_system_id, opts = {})
      data, _status_code, _headers = systeminsights_list_mounts_0_with_http_info(jc_system_id, opts)
      return data
    end

    # List System Insights System Mounts
    # Valid filter fields are &#x60;path&#x60;.
    # @param jc_system_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit 
    # @option opts [Integer] :skip The offset into the records to return.
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @return [Array<(Array<SystemInsightsMounts>, Fixnum, Hash)>] Array<SystemInsightsMounts> data, response status code and response headers
    def systeminsights_list_mounts_0_with_http_info(jc_system_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SystemInsightsApi.systeminsights_list_mounts_0 ..."
      end
      # verify the required parameter 'jc_system_id' is set
      if @api_client.config.client_side_validation && jc_system_id.nil?
        fail ArgumentError, "Missing the required parameter 'jc_system_id' when calling SystemInsightsApi.systeminsights_list_mounts_0"
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.systeminsights_list_mounts_0, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.systeminsights_list_mounts_0, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'skip'].nil? && opts[:'skip'] < 0
        fail ArgumentError, 'invalid value for "opts[:"skip"]" when calling SystemInsightsApi.systeminsights_list_mounts_0, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/systeminsights/{jc_system_id}/mounts".sub('{' + 'jc_system_id' + '}', jc_system_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'filter'] = @api_client.build_collection_param(opts[:'filter'], :csv) if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SystemInsightsMounts>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemInsightsApi#systeminsights_list_mounts_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List System Insights System OS Version
    # Valid filter fields are `version`.
    # @param jc_system_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit  (default to 10)
    # @option opts [Integer] :skip The offset into the records to return. (default to 0)
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @return [Array<SystemInsightsOsVersion>]
    def systeminsights_list_os_version(jc_system_id, opts = {})
      data, _status_code, _headers = systeminsights_list_os_version_with_http_info(jc_system_id, opts)
      return data
    end

    # List System Insights System OS Version
    # Valid filter fields are &#x60;version&#x60;.
    # @param jc_system_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit 
    # @option opts [Integer] :skip The offset into the records to return.
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @return [Array<(Array<SystemInsightsOsVersion>, Fixnum, Hash)>] Array<SystemInsightsOsVersion> data, response status code and response headers
    def systeminsights_list_os_version_with_http_info(jc_system_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SystemInsightsApi.systeminsights_list_os_version ..."
      end
      # verify the required parameter 'jc_system_id' is set
      if @api_client.config.client_side_validation && jc_system_id.nil?
        fail ArgumentError, "Missing the required parameter 'jc_system_id' when calling SystemInsightsApi.systeminsights_list_os_version"
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.systeminsights_list_os_version, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.systeminsights_list_os_version, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'skip'].nil? && opts[:'skip'] < 0
        fail ArgumentError, 'invalid value for "opts[:"skip"]" when calling SystemInsightsApi.systeminsights_list_os_version, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/systeminsights/{jc_system_id}/os_version".sub('{' + 'jc_system_id' + '}', jc_system_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'filter'] = @api_client.build_collection_param(opts[:'filter'], :csv) if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SystemInsightsOsVersion>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemInsightsApi#systeminsights_list_os_version\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List System Insights OS Version
    # Valid filter fields are `jc_system_id` and `version`.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit  (default to 10)
    # @option opts [Integer] :skip The offset into the records to return. (default to 0)
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @return [Array<SystemInsightsOsVersion>]
    def systeminsights_list_os_version_0(opts = {})
      data, _status_code, _headers = systeminsights_list_os_version_0_with_http_info(opts)
      return data
    end

    # List System Insights OS Version
    # Valid filter fields are &#x60;jc_system_id&#x60; and &#x60;version&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit 
    # @option opts [Integer] :skip The offset into the records to return.
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @return [Array<(Array<SystemInsightsOsVersion>, Fixnum, Hash)>] Array<SystemInsightsOsVersion> data, response status code and response headers
    def systeminsights_list_os_version_0_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SystemInsightsApi.systeminsights_list_os_version_0 ..."
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.systeminsights_list_os_version_0, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.systeminsights_list_os_version_0, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'skip'].nil? && opts[:'skip'] < 0
        fail ArgumentError, 'invalid value for "opts[:"skip"]" when calling SystemInsightsApi.systeminsights_list_os_version_0, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/systeminsights/os_version"

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'filter'] = @api_client.build_collection_param(opts[:'filter'], :csv) if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SystemInsightsOsVersion>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemInsightsApi#systeminsights_list_os_version_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List System Insights System Safari Extensions
    # Valid filter fields are `name`.
    # @param jc_system_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit  (default to 10)
    # @option opts [Integer] :skip The offset into the records to return. (default to 0)
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @return [Array<SystemInsightsSafariExtensions>]
    def systeminsights_list_safari_extensions(jc_system_id, opts = {})
      data, _status_code, _headers = systeminsights_list_safari_extensions_with_http_info(jc_system_id, opts)
      return data
    end

    # List System Insights System Safari Extensions
    # Valid filter fields are &#x60;name&#x60;.
    # @param jc_system_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit 
    # @option opts [Integer] :skip The offset into the records to return.
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @return [Array<(Array<SystemInsightsSafariExtensions>, Fixnum, Hash)>] Array<SystemInsightsSafariExtensions> data, response status code and response headers
    def systeminsights_list_safari_extensions_with_http_info(jc_system_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SystemInsightsApi.systeminsights_list_safari_extensions ..."
      end
      # verify the required parameter 'jc_system_id' is set
      if @api_client.config.client_side_validation && jc_system_id.nil?
        fail ArgumentError, "Missing the required parameter 'jc_system_id' when calling SystemInsightsApi.systeminsights_list_safari_extensions"
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.systeminsights_list_safari_extensions, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.systeminsights_list_safari_extensions, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'skip'].nil? && opts[:'skip'] < 0
        fail ArgumentError, 'invalid value for "opts[:"skip"]" when calling SystemInsightsApi.systeminsights_list_safari_extensions, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/systeminsights/{jc_system_id}/safari_extensions".sub('{' + 'jc_system_id' + '}', jc_system_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'filter'] = @api_client.build_collection_param(opts[:'filter'], :csv) if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SystemInsightsSafariExtensions>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemInsightsApi#systeminsights_list_safari_extensions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List System Insights Safari Extensions
    # Valid filter fields are `jc_system_id` and `name`.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit  (default to 10)
    # @option opts [Integer] :skip The offset into the records to return. (default to 0)
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @return [Array<SystemInsightsSafariExtensions>]
    def systeminsights_list_safari_extensions_0(opts = {})
      data, _status_code, _headers = systeminsights_list_safari_extensions_0_with_http_info(opts)
      return data
    end

    # List System Insights Safari Extensions
    # Valid filter fields are &#x60;jc_system_id&#x60; and &#x60;name&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit 
    # @option opts [Integer] :skip The offset into the records to return.
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @return [Array<(Array<SystemInsightsSafariExtensions>, Fixnum, Hash)>] Array<SystemInsightsSafariExtensions> data, response status code and response headers
    def systeminsights_list_safari_extensions_0_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SystemInsightsApi.systeminsights_list_safari_extensions_0 ..."
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.systeminsights_list_safari_extensions_0, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.systeminsights_list_safari_extensions_0, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'skip'].nil? && opts[:'skip'] < 0
        fail ArgumentError, 'invalid value for "opts[:"skip"]" when calling SystemInsightsApi.systeminsights_list_safari_extensions_0, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/systeminsights/safari_extensions"

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'filter'] = @api_client.build_collection_param(opts[:'filter'], :csv) if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SystemInsightsSafariExtensions>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemInsightsApi#systeminsights_list_safari_extensions_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List System Insights System Info
    # Valid filter fields are `jc_system_id` and `cpu_subtype`.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit  (default to 10)
    # @option opts [Integer] :skip The offset into the records to return. (default to 0)
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @return [Array<SystemInsightsSystemInfo>]
    def systeminsights_list_system_info(opts = {})
      data, _status_code, _headers = systeminsights_list_system_info_with_http_info(opts)
      return data
    end

    # List System Insights System Info
    # Valid filter fields are &#x60;jc_system_id&#x60; and &#x60;cpu_subtype&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit 
    # @option opts [Integer] :skip The offset into the records to return.
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @return [Array<(Array<SystemInsightsSystemInfo>, Fixnum, Hash)>] Array<SystemInsightsSystemInfo> data, response status code and response headers
    def systeminsights_list_system_info_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SystemInsightsApi.systeminsights_list_system_info ..."
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.systeminsights_list_system_info, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.systeminsights_list_system_info, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'skip'].nil? && opts[:'skip'] < 0
        fail ArgumentError, 'invalid value for "opts[:"skip"]" when calling SystemInsightsApi.systeminsights_list_system_info, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/systeminsights/system_info"

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'filter'] = @api_client.build_collection_param(opts[:'filter'], :csv) if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SystemInsightsSystemInfo>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemInsightsApi#systeminsights_list_system_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List System Insights System System Info
    # Valid filter fields are `cpu_subtype`.
    # @param jc_system_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit  (default to 10)
    # @option opts [Integer] :skip The offset into the records to return. (default to 0)
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @return [Array<SystemInsightsSystemInfo>]
    def systeminsights_list_system_info_0(jc_system_id, opts = {})
      data, _status_code, _headers = systeminsights_list_system_info_0_with_http_info(jc_system_id, opts)
      return data
    end

    # List System Insights System System Info
    # Valid filter fields are &#x60;cpu_subtype&#x60;.
    # @param jc_system_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit 
    # @option opts [Integer] :skip The offset into the records to return.
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @return [Array<(Array<SystemInsightsSystemInfo>, Fixnum, Hash)>] Array<SystemInsightsSystemInfo> data, response status code and response headers
    def systeminsights_list_system_info_0_with_http_info(jc_system_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SystemInsightsApi.systeminsights_list_system_info_0 ..."
      end
      # verify the required parameter 'jc_system_id' is set
      if @api_client.config.client_side_validation && jc_system_id.nil?
        fail ArgumentError, "Missing the required parameter 'jc_system_id' when calling SystemInsightsApi.systeminsights_list_system_info_0"
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.systeminsights_list_system_info_0, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.systeminsights_list_system_info_0, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'skip'].nil? && opts[:'skip'] < 0
        fail ArgumentError, 'invalid value for "opts[:"skip"]" when calling SystemInsightsApi.systeminsights_list_system_info_0, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/systeminsights/{jc_system_id}/system_info".sub('{' + 'jc_system_id' + '}', jc_system_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'filter'] = @api_client.build_collection_param(opts[:'filter'], :csv) if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SystemInsightsSystemInfo>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemInsightsApi#systeminsights_list_system_info_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List System Insights Users
    # Valid filter fields are `jc_system_id` and `username`.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit  (default to 10)
    # @option opts [Integer] :skip The offset into the records to return. (default to 0)
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @return [Array<SystemInsightsUsers>]
    def systeminsights_list_users(opts = {})
      data, _status_code, _headers = systeminsights_list_users_with_http_info(opts)
      return data
    end

    # List System Insights Users
    # Valid filter fields are &#x60;jc_system_id&#x60; and &#x60;username&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit 
    # @option opts [Integer] :skip The offset into the records to return.
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @return [Array<(Array<SystemInsightsUsers>, Fixnum, Hash)>] Array<SystemInsightsUsers> data, response status code and response headers
    def systeminsights_list_users_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SystemInsightsApi.systeminsights_list_users ..."
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.systeminsights_list_users, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.systeminsights_list_users, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'skip'].nil? && opts[:'skip'] < 0
        fail ArgumentError, 'invalid value for "opts[:"skip"]" when calling SystemInsightsApi.systeminsights_list_users, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/systeminsights/users"

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'filter'] = @api_client.build_collection_param(opts[:'filter'], :csv) if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SystemInsightsUsers>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemInsightsApi#systeminsights_list_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List System Insights System Users
    # Valid filter fields are `username`.
    # @param jc_system_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit  (default to 10)
    # @option opts [Integer] :skip The offset into the records to return. (default to 0)
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @return [Array<SystemInsightsUsers>]
    def systeminsights_list_users_0(jc_system_id, opts = {})
      data, _status_code, _headers = systeminsights_list_users_0_with_http_info(jc_system_id, opts)
      return data
    end

    # List System Insights System Users
    # Valid filter fields are &#x60;username&#x60;.
    # @param jc_system_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit 
    # @option opts [Integer] :skip The offset into the records to return.
    # @option opts [Array<String>] :filter Supported operators are: eq
    # @return [Array<(Array<SystemInsightsUsers>, Fixnum, Hash)>] Array<SystemInsightsUsers> data, response status code and response headers
    def systeminsights_list_users_0_with_http_info(jc_system_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SystemInsightsApi.systeminsights_list_users_0 ..."
      end
      # verify the required parameter 'jc_system_id' is set
      if @api_client.config.client_side_validation && jc_system_id.nil?
        fail ArgumentError, "Missing the required parameter 'jc_system_id' when calling SystemInsightsApi.systeminsights_list_users_0"
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.systeminsights_list_users_0, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SystemInsightsApi.systeminsights_list_users_0, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'skip'].nil? && opts[:'skip'] < 0
        fail ArgumentError, 'invalid value for "opts[:"skip"]" when calling SystemInsightsApi.systeminsights_list_users_0, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/systeminsights/{jc_system_id}/users".sub('{' + 'jc_system_id' + '}', jc_system_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'filter'] = @api_client.build_collection_param(opts[:'filter'], :csv) if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SystemInsightsUsers>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemInsightsApi#systeminsights_list_users_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
