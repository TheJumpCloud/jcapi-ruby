=begin
#JumpCloud APIs

# JumpCloud's V2 API. This set of endpoints allows JumpCloud customers to manage objects, groupings and mappings and interact with the JumpCloud Graph.

OpenAPI spec version: 2.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require 'date'

module JCAPIv2

  class SystemInsightsMounts
    attr_accessor :device

    attr_accessor :device_alias

    attr_accessor :path

    attr_accessor :type

    attr_accessor :blocks_size

    attr_accessor :blocks

    attr_accessor :blocks_free

    attr_accessor :blocks_available

    attr_accessor :inodes

    attr_accessor :inodes_free

    attr_accessor :flags

    attr_accessor :jc_collection_time

    attr_accessor :jc_system_id

    attr_accessor :jc_organization_id


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'device' => :'device',
        :'device_alias' => :'device_alias',
        :'path' => :'path',
        :'type' => :'type',
        :'blocks_size' => :'blocks_size',
        :'blocks' => :'blocks',
        :'blocks_free' => :'blocks_free',
        :'blocks_available' => :'blocks_available',
        :'inodes' => :'inodes',
        :'inodes_free' => :'inodes_free',
        :'flags' => :'flags',
        :'jc_collection_time' => :'jc_collection_time',
        :'jc_system_id' => :'jc_system_id',
        :'jc_organization_id' => :'jc_organization_id'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'device' => :'String',
        :'device_alias' => :'String',
        :'path' => :'String',
        :'type' => :'String',
        :'blocks_size' => :'String',
        :'blocks' => :'String',
        :'blocks_free' => :'String',
        :'blocks_available' => :'String',
        :'inodes' => :'String',
        :'inodes_free' => :'String',
        :'flags' => :'String',
        :'jc_collection_time' => :'String',
        :'jc_system_id' => :'String',
        :'jc_organization_id' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'device')
        self.device = attributes[:'device']
      end

      if attributes.has_key?(:'device_alias')
        self.device_alias = attributes[:'device_alias']
      end

      if attributes.has_key?(:'path')
        self.path = attributes[:'path']
      end

      if attributes.has_key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.has_key?(:'blocks_size')
        self.blocks_size = attributes[:'blocks_size']
      end

      if attributes.has_key?(:'blocks')
        self.blocks = attributes[:'blocks']
      end

      if attributes.has_key?(:'blocks_free')
        self.blocks_free = attributes[:'blocks_free']
      end

      if attributes.has_key?(:'blocks_available')
        self.blocks_available = attributes[:'blocks_available']
      end

      if attributes.has_key?(:'inodes')
        self.inodes = attributes[:'inodes']
      end

      if attributes.has_key?(:'inodes_free')
        self.inodes_free = attributes[:'inodes_free']
      end

      if attributes.has_key?(:'flags')
        self.flags = attributes[:'flags']
      end

      if attributes.has_key?(:'jc_collection_time')
        self.jc_collection_time = attributes[:'jc_collection_time']
      end

      if attributes.has_key?(:'jc_system_id')
        self.jc_system_id = attributes[:'jc_system_id']
      end

      if attributes.has_key?(:'jc_organization_id')
        self.jc_organization_id = attributes[:'jc_organization_id']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          device == o.device &&
          device_alias == o.device_alias &&
          path == o.path &&
          type == o.type &&
          blocks_size == o.blocks_size &&
          blocks == o.blocks &&
          blocks_free == o.blocks_free &&
          blocks_available == o.blocks_available &&
          inodes == o.inodes &&
          inodes_free == o.inodes_free &&
          flags == o.flags &&
          jc_collection_time == o.jc_collection_time &&
          jc_system_id == o.jc_system_id &&
          jc_organization_id == o.jc_organization_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [device, device_alias, path, type, blocks_size, blocks, blocks_free, blocks_available, inodes, inodes_free, flags, jc_collection_time, jc_system_id, jc_organization_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = JCAPIv2.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
