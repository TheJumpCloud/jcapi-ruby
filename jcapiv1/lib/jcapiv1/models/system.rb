=begin
#JumpCloud APIs

# JumpCloud's V1 API. This set of endpoints allows JumpCloud customers to manage commands, systems, & system users.

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require 'date'

module JCAPIv1

  class System
    attr_accessor :_id

    attr_accessor :active

    attr_accessor :agent_version

    attr_accessor :allow_multi_factor_authentication

    attr_accessor :allow_public_key_authentication

    attr_accessor :allow_ssh_password_authentication

    attr_accessor :allow_ssh_root_login

    attr_accessor :amazon_instance_id

    attr_accessor :arch

    attr_accessor :connection_history

    attr_accessor :created

    attr_accessor :display_name

    attr_accessor :fde

    attr_accessor :hostname

    attr_accessor :last_contact

    attr_accessor :modify_sshd_config

    attr_accessor :network_interfaces

    attr_accessor :organization

    attr_accessor :os

    attr_accessor :remote_ip

    attr_accessor :ssh_root_enabled

    attr_accessor :sshd_params

    attr_accessor :system_insights

    attr_accessor :system_timezone

    attr_accessor :tags

    attr_accessor :template_name

    attr_accessor :version


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'_id' => :'_id',
        :'active' => :'active',
        :'agent_version' => :'agentVersion',
        :'allow_multi_factor_authentication' => :'allowMultiFactorAuthentication',
        :'allow_public_key_authentication' => :'allowPublicKeyAuthentication',
        :'allow_ssh_password_authentication' => :'allowSshPasswordAuthentication',
        :'allow_ssh_root_login' => :'allowSshRootLogin',
        :'amazon_instance_id' => :'amazonInstanceID',
        :'arch' => :'arch',
        :'connection_history' => :'connectionHistory',
        :'created' => :'created',
        :'display_name' => :'displayName',
        :'fde' => :'fde',
        :'hostname' => :'hostname',
        :'last_contact' => :'lastContact',
        :'modify_sshd_config' => :'modifySSHDConfig',
        :'network_interfaces' => :'networkInterfaces',
        :'organization' => :'organization',
        :'os' => :'os',
        :'remote_ip' => :'remoteIP',
        :'ssh_root_enabled' => :'sshRootEnabled',
        :'sshd_params' => :'sshdParams',
        :'system_insights' => :'systemInsights',
        :'system_timezone' => :'systemTimezone',
        :'tags' => :'tags',
        :'template_name' => :'templateName',
        :'version' => :'version'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'_id' => :'String',
        :'active' => :'BOOLEAN',
        :'agent_version' => :'String',
        :'allow_multi_factor_authentication' => :'BOOLEAN',
        :'allow_public_key_authentication' => :'BOOLEAN',
        :'allow_ssh_password_authentication' => :'BOOLEAN',
        :'allow_ssh_root_login' => :'BOOLEAN',
        :'amazon_instance_id' => :'String',
        :'arch' => :'String',
        :'connection_history' => :'Array<Object>',
        :'created' => :'String',
        :'display_name' => :'String',
        :'fde' => :'Fde',
        :'hostname' => :'String',
        :'last_contact' => :'String',
        :'modify_sshd_config' => :'BOOLEAN',
        :'network_interfaces' => :'Array<SystemNetworkInterfaces>',
        :'organization' => :'String',
        :'os' => :'String',
        :'remote_ip' => :'String',
        :'ssh_root_enabled' => :'BOOLEAN',
        :'sshd_params' => :'Array<SystemSshdParams>',
        :'system_insights' => :'SystemSystemInsights',
        :'system_timezone' => :'Integer',
        :'tags' => :'Array<String>',
        :'template_name' => :'String',
        :'version' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'_id')
        self._id = attributes[:'_id']
      end

      if attributes.has_key?(:'active')
        self.active = attributes[:'active']
      end

      if attributes.has_key?(:'agentVersion')
        self.agent_version = attributes[:'agentVersion']
      end

      if attributes.has_key?(:'allowMultiFactorAuthentication')
        self.allow_multi_factor_authentication = attributes[:'allowMultiFactorAuthentication']
      end

      if attributes.has_key?(:'allowPublicKeyAuthentication')
        self.allow_public_key_authentication = attributes[:'allowPublicKeyAuthentication']
      end

      if attributes.has_key?(:'allowSshPasswordAuthentication')
        self.allow_ssh_password_authentication = attributes[:'allowSshPasswordAuthentication']
      end

      if attributes.has_key?(:'allowSshRootLogin')
        self.allow_ssh_root_login = attributes[:'allowSshRootLogin']
      end

      if attributes.has_key?(:'amazonInstanceID')
        self.amazon_instance_id = attributes[:'amazonInstanceID']
      end

      if attributes.has_key?(:'arch')
        self.arch = attributes[:'arch']
      end

      if attributes.has_key?(:'connectionHistory')
        if (value = attributes[:'connectionHistory']).is_a?(Array)
          self.connection_history = value
        end
      end

      if attributes.has_key?(:'created')
        self.created = attributes[:'created']
      end

      if attributes.has_key?(:'displayName')
        self.display_name = attributes[:'displayName']
      end

      if attributes.has_key?(:'fde')
        self.fde = attributes[:'fde']
      end

      if attributes.has_key?(:'hostname')
        self.hostname = attributes[:'hostname']
      end

      if attributes.has_key?(:'lastContact')
        self.last_contact = attributes[:'lastContact']
      end

      if attributes.has_key?(:'modifySSHDConfig')
        self.modify_sshd_config = attributes[:'modifySSHDConfig']
      end

      if attributes.has_key?(:'networkInterfaces')
        if (value = attributes[:'networkInterfaces']).is_a?(Array)
          self.network_interfaces = value
        end
      end

      if attributes.has_key?(:'organization')
        self.organization = attributes[:'organization']
      end

      if attributes.has_key?(:'os')
        self.os = attributes[:'os']
      end

      if attributes.has_key?(:'remoteIP')
        self.remote_ip = attributes[:'remoteIP']
      end

      if attributes.has_key?(:'sshRootEnabled')
        self.ssh_root_enabled = attributes[:'sshRootEnabled']
      end

      if attributes.has_key?(:'sshdParams')
        if (value = attributes[:'sshdParams']).is_a?(Array)
          self.sshd_params = value
        end
      end

      if attributes.has_key?(:'systemInsights')
        self.system_insights = attributes[:'systemInsights']
      end

      if attributes.has_key?(:'systemTimezone')
        self.system_timezone = attributes[:'systemTimezone']
      end

      if attributes.has_key?(:'tags')
        if (value = attributes[:'tags']).is_a?(Array)
          self.tags = value
        end
      end

      if attributes.has_key?(:'templateName')
        self.template_name = attributes[:'templateName']
      end

      if attributes.has_key?(:'version')
        self.version = attributes[:'version']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          _id == o._id &&
          active == o.active &&
          agent_version == o.agent_version &&
          allow_multi_factor_authentication == o.allow_multi_factor_authentication &&
          allow_public_key_authentication == o.allow_public_key_authentication &&
          allow_ssh_password_authentication == o.allow_ssh_password_authentication &&
          allow_ssh_root_login == o.allow_ssh_root_login &&
          amazon_instance_id == o.amazon_instance_id &&
          arch == o.arch &&
          connection_history == o.connection_history &&
          created == o.created &&
          display_name == o.display_name &&
          fde == o.fde &&
          hostname == o.hostname &&
          last_contact == o.last_contact &&
          modify_sshd_config == o.modify_sshd_config &&
          network_interfaces == o.network_interfaces &&
          organization == o.organization &&
          os == o.os &&
          remote_ip == o.remote_ip &&
          ssh_root_enabled == o.ssh_root_enabled &&
          sshd_params == o.sshd_params &&
          system_insights == o.system_insights &&
          system_timezone == o.system_timezone &&
          tags == o.tags &&
          template_name == o.template_name &&
          version == o.version
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [_id, active, agent_version, allow_multi_factor_authentication, allow_public_key_authentication, allow_ssh_password_authentication, allow_ssh_root_login, amazon_instance_id, arch, connection_history, created, display_name, fde, hostname, last_contact, modify_sshd_config, network_interfaces, organization, os, remote_ip, ssh_root_enabled, sshd_params, system_insights, system_timezone, tags, template_name, version].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = JCAPIv1.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
