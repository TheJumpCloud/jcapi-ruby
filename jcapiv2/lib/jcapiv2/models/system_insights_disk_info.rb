=begin
#JumpCloud APIs

# JumpCloud's V2 API. This set of endpoints allows JumpCloud customers to manage objects, groupings and mappings and interact with the JumpCloud Graph.

OpenAPI spec version: 2.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require 'date'

module JCAPIv2

  class SystemInsightsDiskInfo
    attr_accessor :collection_time

    attr_accessor :description

    attr_accessor :disk_index

    attr_accessor :disk_size

    attr_accessor :hardware_model

    attr_accessor :id

    attr_accessor :manufacturer

    attr_accessor :name

    attr_accessor :partitions

    attr_accessor :pnp_device_id

    attr_accessor :serial

    attr_accessor :system_id

    attr_accessor :type


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'collection_time' => :'collection_time',
        :'description' => :'description',
        :'disk_index' => :'disk_index',
        :'disk_size' => :'disk_size',
        :'hardware_model' => :'hardware_model',
        :'id' => :'id',
        :'manufacturer' => :'manufacturer',
        :'name' => :'name',
        :'partitions' => :'partitions',
        :'pnp_device_id' => :'pnp_device_id',
        :'serial' => :'serial',
        :'system_id' => :'system_id',
        :'type' => :'type'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'collection_time' => :'String',
        :'description' => :'String',
        :'disk_index' => :'Integer',
        :'disk_size' => :'String',
        :'hardware_model' => :'String',
        :'id' => :'String',
        :'manufacturer' => :'String',
        :'name' => :'String',
        :'partitions' => :'Integer',
        :'pnp_device_id' => :'String',
        :'serial' => :'String',
        :'system_id' => :'String',
        :'type' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'collection_time')
        self.collection_time = attributes[:'collection_time']
      end

      if attributes.has_key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.has_key?(:'disk_index')
        self.disk_index = attributes[:'disk_index']
      end

      if attributes.has_key?(:'disk_size')
        self.disk_size = attributes[:'disk_size']
      end

      if attributes.has_key?(:'hardware_model')
        self.hardware_model = attributes[:'hardware_model']
      end

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'manufacturer')
        self.manufacturer = attributes[:'manufacturer']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'partitions')
        self.partitions = attributes[:'partitions']
      end

      if attributes.has_key?(:'pnp_device_id')
        self.pnp_device_id = attributes[:'pnp_device_id']
      end

      if attributes.has_key?(:'serial')
        self.serial = attributes[:'serial']
      end

      if attributes.has_key?(:'system_id')
        self.system_id = attributes[:'system_id']
      end

      if attributes.has_key?(:'type')
        self.type = attributes[:'type']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          collection_time == o.collection_time &&
          description == o.description &&
          disk_index == o.disk_index &&
          disk_size == o.disk_size &&
          hardware_model == o.hardware_model &&
          id == o.id &&
          manufacturer == o.manufacturer &&
          name == o.name &&
          partitions == o.partitions &&
          pnp_device_id == o.pnp_device_id &&
          serial == o.serial &&
          system_id == o.system_id &&
          type == o.type
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [collection_time, description, disk_index, disk_size, hardware_model, id, manufacturer, name, partitions, pnp_device_id, serial, system_id, type].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = JCAPIv2.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
